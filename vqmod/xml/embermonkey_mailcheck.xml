<modification>
	<id>Email Mailcheck on registration</id>
	<version><![CDATA[1]]></version>
	<vqmver><![CDATA[2]]></vqmver>
	<author>Peter Stuart - embermonkey</author>
	<!-- Front End -->
	<!-- Controller -->
	<file name="catalog/controller/account/register.php">
		<operation>
			<search position="before"><![CDATA[if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/account/register.tpl')) {]]></search>
			<add><![CDATA[
				// Email Providers
				$this->load->model('localisation/email_providers');
				$result = $this->model_localisation_email_providers->getProviders();
				$this->data['providers'] = $result['email_providers'];
			]]></add>
		</operation>
	</file>
	
	<!-- Template -->
	<file name="catalog/view/theme/*/template/account/register.tpl">
		<operation>
			<search position="replace"><![CDATA[<td><input type="text" name="email" value="<?php echo $email; ?>" />]]></search>
			<add><![CDATA[
          <td><input type="text" name="email" id="email" value="<?php echo $email; ?>" />
          <div id="suggest"></div>
			]]></add>
		</operation>
		<operation>
			<search position="before"><![CDATA[<?php echo $footer; ?>]]></search>
			<add><![CDATA[
<style>

	#suggest {
		margin-top:5px;	
		display:none;
	}
	
	#emailSuggestion {
		font-weight:bold;
		cursor:pointer;
	}
	
	#closeSuggestion {
		font-weight:bold;
		cursor:pointer;
		color:#aaa;
	}
		
	#emailSuggestion:hover, #closeSuggestion:hover {
		text-decoration:underline;
	}
</style>
<script>
$('#email').blur(function() {
  $(this).mailcheck({
    suggested: function(element, suggestion) {
          $("#suggest").html("Você quis dizer: <span id='emailSuggestion'>" + suggestion.full + "</span> <span style='color:#bbb;'>|</span> <span id='closeSuggestion'>Não</span>");
		  $("#suggest").fadeIn(500);
    },
    empty: function(element) {
      $("#suggest").html("");
    }
  });
});
$("#emailSuggestion").live("click", function(){
	var email = $(this).html();
	$("#email").val(email);
	$("#suggest").fadeOut(500);
});
$("#closeSuggestion").live("click", function(){
	$("#suggest").fadeOut(500);
});
</script>
			]]></add>
		</operation>
		<operation>
			<search position="after"><![CDATA[<?php echo $header; ?>]]></search>
			<add><![CDATA[
<script type="text/javascript" src="catalog/view/javascript/mailcheck.min.js"></script>
<script type="text/javascript">
/*
* Mailcheck https://github.com/Kicksend/mailcheck
* Author
* Derrick Ko (@derrickko)
*
* License
* Copyright (c) 2012 Receivd, Inc.
*
* Licensed under the MIT License.
*
* v 1.1
*/

var Kicksend = {
  mailcheck : {
    threshold: 3,

    defaultDomains: [<?php echo html_entity_decode($providers); ?>],

    defaultTopLevelDomains: ["co.uk", "com", "net", "org", "info", "edu", "gov", "mil"],

    run: function(opts) {
      opts.domains = opts.domains || Kicksend.mailcheck.defaultDomains;
      opts.topLevelDomains = opts.topLevelDomains || Kicksend.mailcheck.defaultTopLevelDomains;
      opts.distanceFunction = opts.distanceFunction || Kicksend.sift3Distance;

      var result = Kicksend.mailcheck.suggest(encodeURI(opts.email), opts.domains, opts.topLevelDomains, opts.distanceFunction);

      if (result) {
        if (opts.suggested) {
          opts.suggested(result);
        }
      } else {
        if (opts.empty) {
          opts.empty();
        }
      }
    },

    suggest: function(email, domains, topLevelDomains, distanceFunction) {
      email = email.toLowerCase();

      var emailParts = this.splitEmail(email);

      var closestDomain = this.findClosestDomain(emailParts.domain, domains, distanceFunction);

      if (closestDomain) {
        if (closestDomain != emailParts.domain) {
          // The email address closely matches one of the supplied domains; return a suggestion
          return { address: emailParts.address, domain: closestDomain, full: emailParts.address + "@" + closestDomain };
        }
      } else {
        // The email address does not closely match one of the supplied domains
        var closestTopLevelDomain = this.findClosestDomain(emailParts.topLevelDomain, topLevelDomains);
        if (emailParts.domain && closestTopLevelDomain && closestTopLevelDomain != emailParts.topLevelDomain) {
          // The email address may have a mispelled top-level domain; return a suggestion
          var domain = emailParts.domain;
          closestDomain = domain.substring(0, domain.lastIndexOf(emailParts.topLevelDomain)) + closestTopLevelDomain;
          return { address: emailParts.address, domain: closestDomain, full: emailParts.address + "@" + closestDomain };
        }
      }
      /* The email address exactly matches one of the supplied domains, does not closely
* match any domain and does not appear to simply have a mispelled top-level domain,
* or is an invalid email address; do not return a suggestion.
*/
      return false;
    },

    findClosestDomain: function(domain, domains, distanceFunction) {
      var dist;
      var minDist = 99;
      var closestDomain = null;

      if (!domain || !domains) {
        return false;
      }
      if(!distanceFunction) {
        distanceFunction = this.sift3Distance;
      }

      for (var i = 0; i < domains.length; i++) {
        if (domain === domains[i]) {
          return domain;
        }
        dist = distanceFunction(domain, domains[i]);
        if (dist < minDist) {
          minDist = dist;
          closestDomain = domains[i];
        }
      }

      if (minDist <= this.threshold && closestDomain !== null) {
        return closestDomain;
      } else {
        return false;
      }
    },

    sift3Distance: function(s1, s2) {
      // sift3: http://siderite.blogspot.com/2007/04/super-fast-and-accurate-string-distance.html
      if (s1 == null || s1.length === 0) {
        if (s2 == null || s2.length === 0) {
          return 0;
        } else {
          return s2.length;
        }
      }

      if (s2 == null || s2.length === 0) {
        return s1.length;
      }

      var c = 0;
      var offset1 = 0;
      var offset2 = 0;
      var lcs = 0;
      var maxOffset = 5;

      while ((c + offset1 < s1.length) && (c + offset2 < s2.length)) {
        if (s1.charAt(c + offset1) == s2.charAt(c + offset2)) {
          lcs++;
        } else {
          offset1 = 0;
          offset2 = 0;
          for (var i = 0; i < maxOffset; i++) {
            if ((c + i < s1.length) && (s1.charAt(c + i) == s2.charAt(c))) {
              offset1 = i;
              break;
            }
            if ((c + i < s2.length) && (s1.charAt(c) == s2.charAt(c + i))) {
              offset2 = i;
              break;
            }
          }
        }
        c++;
      }
      return (s1.length + s2.length) /2 - lcs;
    },

    splitEmail: function(email) {
      var parts = email.split('@');

      if (parts.length < 2) {
        return false;
      }

      for (var i = 0; i < parts.length; i++) {
        if (parts[i] === '') {
          return false;
        }
      }

      var domain = parts.pop();
      var domainParts = domain.split('.');
      var tld = '';

      if (domainParts.length == 0) {
        // The address does not have a top-level domain
        return false;
      } else if (domainParts.length == 1) {
        // The address has only a top-level domain (valid under RFC)
        tld = domainParts[0];
      } else {
        // The address has a domain and a top-level domain
        for (var i = 1; i < domainParts.length; i++) {
          tld += domainParts[i] + '.';
        }
        if (domainParts.length >= 2) {
          tld = tld.substring(0, tld.length - 1);
        }
      }

      return {
        topLevelDomain: tld,
        domain: domain,
        address: parts.join('@')
      }
    }
  }
};

if (window.jQuery) {
  (function($){
    $.fn.mailcheck = function(opts) {
      var self = this;
      if (opts.suggested) {
        var oldSuggested = opts.suggested;
        opts.suggested = function(result) {
          oldSuggested(self, result);
        };
      }

      if (opts.empty) {
        var oldEmpty = opts.empty;
        opts.empty = function() {
          oldEmpty.call(null, self);
        };
      }

      opts.email = this.val();
      Kicksend.mailcheck.run(opts);
    }
  })(jQuery);
}
</script>
			]]></add>
		</operation>
	</file>
	
	<!-- Admin -->
	<!-- Language -->
	<file name="admin/language/*/common/header.php">
		<operation>
			<search position="before"><![CDATA[?>]]></search>
			<add><![CDATA[
				$_['text_email_providers'] = 'Provedores de E-mail';
			]]></add>
		</operation>
	</file>
	
	<!-- Controller -->
	<file name="admin/controller/common/header.php">
		<operation>
			<search position="after"><![CDATA[$this->data['weight_class'] = $this->url->link('localisation/weight_class', 'token=' . $this->session->data['token'], 'SSL');]]></search>
			<add><![CDATA[
				$this->data['email_providers'] = $this->url->link('localisation/email_providers', 'token=' . $this->session->data['token'], 'SSL');
			]]></add>
		</operation>
		<operation>
			<search position="after"><![CDATA[$this->data['text_weight_class'] = $this->language->get('text_weight_class');]]></search>
			<add><![CDATA[
				$this->data['text_email_providers'] = $this->language->get('text_email_providers');
			]]></add>
		</operation>
	</file>
	
	<!-- Template -->
	<file name="admin/view/template/common/header.tpl">
		<operation>
			<search position="after"><![CDATA[<li><a href="<?php echo $weight_class; ?>"><?php echo $text_weight_class; ?></a></li>]]></search>
			<add><![CDATA[
				<li><a href="<?php echo $email_providers; ?>"><?php echo $text_email_providers; ?></a></li>
			]]></add>
		</operation>
	</file>
</modification>